<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="graphics_8h" kind="file" language="C++">
    <compoundname>graphics.h</compoundname>
    <includes refid="mission_8h" local="yes">mission.h</includes>
    <includes local="no">memory</includes>
    <includes local="no">QImage</includes>
    <includes local="no">QPixmap</includes>
    <includes local="no">QPainter</includes>
    <includes local="no">QQueue</includes>
    <includes local="no">QPoint</includes>
    <includes local="no">GraphicsOverlay.h</includes>
    <includes local="no">Graphic.h</includes>
    <includes local="no">Point.h</includes>
    <includes local="no">PolylineBuilder.h</includes>
    <includes local="no">SpatialReference.h</includes>
    <includes local="no">SimpleMarkerSymbol.h</includes>
    <includes local="no">TextSymbol.h</includes>
    <includes local="no">CompositeSymbol.h</includes>
    <includes local="no">MultilayerPointSymbol.h</includes>
    <includes local="no">PictureMarkerSymbol.h</includes>
    <includes local="no">PolygonBuilder.h</includes>
    <includes local="no">LineSegment.h</includes>
    <includes local="yes">GeometryEngine.h</includes>
    <includes refid="task_8h" local="yes">task.h</includes>
    <includedby refid="param_8h" local="yes">/home/cooper/test/avl_gui_new/include/param.h</includedby>
    <includedby refid="vehicle_8h" local="yes">/home/cooper/test/avl_gui_new/include/vehicle.h</includedby>
    <includedby refid="geofence_8h" local="yes">/home/cooper/test/avl_gui_new/include/geofence.h</includedby>
    <includedby refid="geofence__data__model_8h" local="yes">/home/cooper/test/avl_gui_new/include/geofence_data_model.h</includedby>
    <includedby refid="param__data__model_8h" local="yes">/home/cooper/test/avl_gui_new/include/param_data_model.h</includedby>
    <incdepgraph>
      <node id="50">
        <label>GeometryEngine.h</label>
      </node>
      <node id="39">
        <label>Graphic.h</label>
      </node>
      <node id="3">
        <label>QObject</label>
      </node>
      <node id="12">
        <label>protocol/avl.h</label>
        <link refid="avl_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>parameter.h</label>
        <link refid="parameter_8h_source"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>cstdint</label>
      </node>
      <node id="10">
        <label>QPointF</label>
      </node>
      <node id="46">
        <label>MultilayerPointSymbol.h</label>
      </node>
      <node id="42">
        <label>SpatialReference.h</label>
      </node>
      <node id="47">
        <label>PictureMarkerSymbol.h</label>
      </node>
      <node id="11">
        <label>cmath</label>
      </node>
      <node id="31">
        <label>passthrough_packet.h</label>
        <link refid="passthrough__packet_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>stdexcept</label>
      </node>
      <node id="2">
        <label>mission.h</label>
        <link refid="mission_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>vector.h</label>
        <link refid="vector_8h_source"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>parameter_list.h</label>
        <link refid="parameter__list_8h_source"/>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>string</label>
      </node>
      <node id="38">
        <label>QPoint</label>
      </node>
      <node id="1">
        <label>/home/cooper/test/avl_gui_new/include/graphics.h</label>
        <link refid="graphics_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>QQmlEngine</label>
      </node>
      <node id="20">
        <label>util/byte.h</label>
        <link refid="byte_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>QImage</label>
      </node>
      <node id="45">
        <label>CompositeSymbol.h</label>
      </node>
      <node id="40">
        <label>Point.h</label>
      </node>
      <node id="9">
        <label>action_type.h</label>
        <link refid="action__type_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>QPainter</label>
      </node>
      <node id="41">
        <label>PolylineBuilder.h</label>
      </node>
      <node id="48">
        <label>PolygonBuilder.h</label>
      </node>
      <node id="7">
        <label>task_type.h</label>
        <link refid="task__type_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>LineSegment.h</label>
      </node>
      <node id="6">
        <label>QDebug</label>
      </node>
      <node id="16">
        <label>vector</label>
      </node>
      <node id="14">
        <label>packet.h</label>
        <link refid="packet_8h_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>command_packet.h</label>
        <link refid="command__packet_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>QQueue</label>
      </node>
      <node id="30">
        <label>action_packet.h</label>
        <link refid="action__packet_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>field.h</label>
        <link refid="field_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>cstddef</label>
      </node>
      <node id="13">
        <label>response_packet.h</label>
        <link refid="response__packet_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>QPixmap</label>
      </node>
      <node id="44">
        <label>TextSymbol.h</label>
      </node>
      <node id="32">
        <label>GraphicsOverlay.h</label>
      </node>
      <node id="24">
        <label>algorithm</label>
      </node>
      <node id="21">
        <label>cstring</label>
      </node>
      <node id="26">
        <label>device_packet.h</label>
        <link refid="device__packet_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>task.h</label>
        <link refid="task_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>memory</label>
      </node>
      <node id="43">
        <label>SimpleMarkerSymbol.h</label>
      </node>
      <node id="4">
        <label>QVector</label>
      </node>
      <node id="25">
        <label>heartbeat_packet.h</label>
        <link refid="heartbeat__packet_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4">
        <label>/home/cooper/test/avl_gui_new/include/vehicle.h</label>
        <link refid="vehicle_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>/home/cooper/test/avl_gui_new/include/geofence.h</label>
        <link refid="geofence_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/cooper/test/avl_gui_new/include/graphics.h</label>
        <link refid="graphics_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>/home/cooper/test/avl_gui_new/include/vehicle_manager.h</label>
        <link refid="vehicle__manager_8h_source"/>
      </node>
      <node id="6">
        <label>/home/cooper/test/avl_gui_new/include/vehicle_data_model.h</label>
        <link refid="vehicle__data__model_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>/home/cooper/test/avl_gui_new/include/geofence_data_model.h</label>
        <link refid="geofence__data__model_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>/home/cooper/test/avl_gui_new/include/param.h</label>
        <link refid="param_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>/home/cooper/test/avl_gui_new/include/avl_map_display.h</label>
        <link refid="avl__map__display_8h_source"/>
      </node>
      <node id="9">
        <label>/home/cooper/test/avl_gui_new/include/param_data_model.h</label>
        <link refid="param__data__model_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>/home/cooper/test/avl_gui_new/include/vehicle_connection.h</label>
        <link refid="vehicle__connection_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="graphics_8h_1a223995e88868daec28f6d9abf602b35e" prot="public" static="no">
        <name>SWATH_LINE_Z_INDEX</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cooper/test/avl_gui_new/include/graphics.h" line="48" column="9" bodyfile="/home/cooper/test/avl_gui_new/include/graphics.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="graphics_8h_1af6f6ea4b16868d1400f1e4a8821f7066" prot="public" static="no">
        <name>GEOFENCE_POINT_Z_INDEX</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cooper/test/avl_gui_new/include/graphics.h" line="49" column="9" bodyfile="/home/cooper/test/avl_gui_new/include/graphics.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="graphics_8h_1a9c5345d28fb94111b9121a982d23faad" prot="public" static="no">
        <name>GEOFENCE_OUTLINE_Z_INDEX</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cooper/test/avl_gui_new/include/graphics.h" line="50" column="9" bodyfile="/home/cooper/test/avl_gui_new/include/graphics.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="graphics_8h_1abd0897972ef1da5af3e972123c1ba92c" prot="public" static="no">
        <name>WAYPOINT_Z_INDEX</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cooper/test/avl_gui_new/include/graphics.h" line="51" column="9" bodyfile="/home/cooper/test/avl_gui_new/include/graphics.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="graphics_8h_1ac5eef2e8010ff073f770bc48cce1bc8a" prot="public" static="no">
        <name>VEHICLE_PATH_Z_INDEX</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cooper/test/avl_gui_new/include/graphics.h" line="52" column="9" bodyfile="/home/cooper/test/avl_gui_new/include/graphics.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="graphics_8h_1a5f22cdc1add10d11d8edfd25b535a732" prot="public" static="no">
        <name>VEHICLE_ICON_Z_INDEX</name>
        <initializer>5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cooper/test/avl_gui_new/include/graphics.h" line="53" column="9" bodyfile="/home/cooper/test/avl_gui_new/include/graphics.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="graphics_8h_1a952eac791b596a61bba0a133a3bb439f" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double PI</definition>
        <argsstring></argsstring>
        <name>PI</name>
        <initializer>= 3.141592</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cooper/test/avl_gui_new/include/graphics.h" line="41" column="14" bodyfile="/home/cooper/test/avl_gui_new/include/graphics.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="graphics_8h_1aa151e7dfd03bfd307b4a0d2af1f53214" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>QImage</type>
        <definition>QImage get_icon_in_color</definition>
        <argsstring>(QString resource_name, QColor color)</argsstring>
        <name>get_icon_in_color</name>
        <param>
          <type>QString</type>
          <declname>resource_name</declname>
        </param>
        <param>
          <type>QColor</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cooper/test/avl_gui_new/include/graphics.h" line="66" column="15" bodyfile="/home/cooper/test/avl_gui_new/include/graphics.h" bodystart="66" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="graphics_8h_1ad1f68498a44bc30433de8cdbc8eb8907" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; Graphic &gt;</type>
        <definition>std::shared_ptr&lt;Graphic&gt; get_vehicle_icon_graphic</definition>
        <argsstring>(double lat, double lon, double yaw, QColor color)</argsstring>
        <name>get_vehicle_icon_graphic</name>
        <param>
          <type>double</type>
          <declname>lat</declname>
        </param>
        <param>
          <type>double</type>
          <declname>lon</declname>
        </param>
        <param>
          <type>double</type>
          <declname>yaw</declname>
        </param>
        <param>
          <type>QColor</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cooper/test/avl_gui_new/include/graphics.h" line="92" column="24" bodyfile="/home/cooper/test/avl_gui_new/include/graphics.h" bodystart="92" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="graphics_8h_1a411978813c33032c6da4f041932e9c66" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; Graphic &gt;</type>
        <definition>std::shared_ptr&lt;Graphic&gt; get_vehicle_path_graphic</definition>
        <argsstring>(QQueue&lt; Point &gt; path, QColor color)</argsstring>
        <name>get_vehicle_path_graphic</name>
        <param>
          <type>QQueue&lt; Point &gt;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>QColor</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cooper/test/avl_gui_new/include/graphics.h" line="133" column="24" bodyfile="/home/cooper/test/avl_gui_new/include/graphics.h" bodystart="133" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="graphics_8h_1a1aedbfdd8f708b32499620051134c2bb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void get_vehicle_graphic</definition>
        <argsstring>(std::shared_ptr&lt; GraphicsOverlay &gt; graphics_overlay, QQueue&lt; Point &gt; path, double yaw, QColor color)</argsstring>
        <name>get_vehicle_graphic</name>
        <param>
          <type>std::shared_ptr&lt; GraphicsOverlay &gt;</type>
          <declname>graphics_overlay</declname>
        </param>
        <param>
          <type>QQueue&lt; Point &gt;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>double</type>
          <declname>yaw</declname>
        </param>
        <param>
          <type>QColor</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cooper/test/avl_gui_new/include/graphics.h" line="162" column="13" bodyfile="/home/cooper/test/avl_gui_new/include/graphics.h" bodystart="162" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="graphics_8h_1a4a8a11a8486f215bd828e9dfb7f893cb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; Graphic &gt;</type>
        <definition>std::shared_ptr&lt;Graphic&gt; get_waypoint_graphic</definition>
        <argsstring>(double lat, double lon, int number, QColor color)</argsstring>
        <name>get_waypoint_graphic</name>
        <param>
          <type>double</type>
          <declname>lat</declname>
        </param>
        <param>
          <type>double</type>
          <declname>lon</declname>
        </param>
        <param>
          <type>int</type>
          <declname>number</declname>
        </param>
        <param>
          <type>QColor</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cooper/test/avl_gui_new/include/graphics.h" line="197" column="24" bodyfile="/home/cooper/test/avl_gui_new/include/graphics.h" bodystart="197" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="graphics_8h_1a8a776cddddbf43d9c19a64c6f6577336" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; Graphic &gt;</type>
        <definition>std::shared_ptr&lt;Graphic&gt; get_zone_waypoint_graphic</definition>
        <argsstring>(double lat, double lon, int number, QColor color)</argsstring>
        <name>get_zone_waypoint_graphic</name>
        <param>
          <type>double</type>
          <declname>lat</declname>
        </param>
        <param>
          <type>double</type>
          <declname>lon</declname>
        </param>
        <param>
          <type>int</type>
          <declname>number</declname>
        </param>
        <param>
          <type>QColor</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cooper/test/avl_gui_new/include/graphics.h" line="235" column="24" bodyfile="/home/cooper/test/avl_gui_new/include/graphics.h" bodystart="235" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="graphics_8h_1a00d01479f8f726db831db83cb8f7523a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; Graphic &gt;</type>
        <definition>std::shared_ptr&lt;Graphic&gt; get_geofence_graphic</definition>
        <argsstring>(double lat, double lon)</argsstring>
        <name>get_geofence_graphic</name>
        <param>
          <type>double</type>
          <declname>lat</declname>
        </param>
        <param>
          <type>double</type>
          <declname>lon</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cooper/test/avl_gui_new/include/graphics.h" line="272" column="24" bodyfile="/home/cooper/test/avl_gui_new/include/graphics.h" bodystart="272" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="graphics_8h_1a18e34ca2e25df6bf4e803dfc2f218123" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; Graphic &gt;</type>
        <definition>std::shared_ptr&lt;Graphic&gt; get_geofence_outline_graphic</definition>
        <argsstring>(QVector&lt; QPointF &gt; geofence_points)</argsstring>
        <name>get_geofence_outline_graphic</name>
        <param>
          <type>QVector&lt; QPointF &gt;</type>
          <declname>geofence_points</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cooper/test/avl_gui_new/include/graphics.h" line="295" column="24" bodyfile="/home/cooper/test/avl_gui_new/include/graphics.h" bodystart="295" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="graphics_8h_1a3787f3fe3a859451af9768fb48937fec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; Graphic &gt;</type>
        <definition>std::shared_ptr&lt;Graphic&gt; get_zone_outline_graphic</definition>
        <argsstring>(QVector&lt; QPointF &gt; points, QColor color)</argsstring>
        <name>get_zone_outline_graphic</name>
        <param>
          <type>QVector&lt; QPointF &gt;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>QColor</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cooper/test/avl_gui_new/include/graphics.h" line="320" column="24" bodyfile="/home/cooper/test/avl_gui_new/include/graphics.h" bodystart="320" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="graphics_8h_1a6066f0eb11cc6a64b6565fa66379dd34" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; Graphic &gt;</type>
        <definition>std::shared_ptr&lt;Graphic&gt; get_swath_line_graphic</definition>
        <argsstring>(double lat1, double lon1, double lat2, double lon2, QColor color)</argsstring>
        <name>get_swath_line_graphic</name>
        <param>
          <type>double</type>
          <declname>lat1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>lon1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>lat2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>lon2</declname>
        </param>
        <param>
          <type>QColor</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cooper/test/avl_gui_new/include/graphics.h" line="350" column="24" bodyfile="/home/cooper/test/avl_gui_new/include/graphics.h" bodystart="350" bodyend="374"/>
      </memberdef>
      <memberdef kind="function" id="graphics_8h_1ad6c1b93671bf97afeaa7f8a95221e27b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void get_task_graphic</definition>
        <argsstring>(GraphicsOverlay *graphics_overlay, Task *task, QColor color)</argsstring>
        <name>get_task_graphic</name>
        <param>
          <type>GraphicsOverlay *</type>
          <declname>graphics_overlay</declname>
        </param>
        <param>
          <type><ref refid="class_task" kindref="compound">Task</ref> *</type>
          <declname>task</declname>
        </param>
        <param>
          <type>QColor</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cooper/test/avl_gui_new/include/graphics.h" line="385" column="13" bodyfile="/home/cooper/test/avl_gui_new/include/graphics.h" bodystart="385" bodyend="491"/>
      </memberdef>
      <memberdef kind="function" id="graphics_8h_1ae420d3df2e1dff293557c8e4b03f1ad0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void generate_survey_zone_points</definition>
        <argsstring>(Task *zone_task, Task *path_task, GraphicsOverlay *graphics_overlay)</argsstring>
        <name>generate_survey_zone_points</name>
        <param>
          <type><ref refid="class_task" kindref="compound">Task</ref> *</type>
          <declname>zone_task</declname>
        </param>
        <param>
          <type><ref refid="class_task" kindref="compound">Task</ref> *</type>
          <declname>path_task</declname>
        </param>
        <param>
          <type>GraphicsOverlay *</type>
          <declname>graphics_overlay</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cooper/test/avl_gui_new/include/graphics.h" line="494" column="13" bodyfile="/home/cooper/test/avl_gui_new/include/graphics.h" bodystart="494" bodyend="620"/>
      </memberdef>
      <memberdef kind="function" id="graphics_8h_1a5c4c516d5bca4f3287cb1148f464c90c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void get_mission_graphic</definition>
        <argsstring>(GraphicsOverlay *graphics_overlay, Mission *mission, QColor color)</argsstring>
        <name>get_mission_graphic</name>
        <param>
          <type>GraphicsOverlay *</type>
          <declname>graphics_overlay</declname>
        </param>
        <param>
          <type><ref refid="class_mission" kindref="compound">Mission</ref> *</type>
          <declname>mission</declname>
        </param>
        <param>
          <type>QColor</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cooper/test/avl_gui_new/include/graphics.h" line="633" column="13" bodyfile="/home/cooper/test/avl_gui_new/include/graphics.h" bodystart="633" bodyend="651"/>
      </memberdef>
      <memberdef kind="function" id="graphics_8h_1a8dbd3b54d8f6fd7227b5e49b7d94603c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; Graphic &gt;</type>
        <definition>std::shared_ptr&lt;Graphic&gt; get_waypoint_graphic</definition>
        <argsstring>(Task::waypoint wp, int number, QColor color)</argsstring>
        <name>get_waypoint_graphic</name>
        <param>
          <type><ref refid="struct_task_1_1waypoint" kindref="compound">Task::waypoint</ref></type>
          <declname>wp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>number</declname>
        </param>
        <param>
          <type>QColor</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cooper/test/avl_gui_new/include/graphics.h" line="666" column="24" bodyfile="/home/cooper/test/avl_gui_new/include/graphics.h" bodystart="666" bodyend="694"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Autonomous<sp/>Vehicle<sp/>Library</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Description:<sp/>Utility<sp/>functions<sp/>for<sp/>creating<sp/>graphics<sp/>for<sp/>display<sp/>on<sp/>a<sp/>map.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GRAPHICS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GRAPHICS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Mission<sp/>class<sp/>for<sp/>creation<sp/>of<sp/>mission<sp/>graphics</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mission.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C++<sp/>includes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Qt<sp/>includes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QImage&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QPixmap&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QPainter&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QQueue&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QPoint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ArcGIS<sp/>includes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;GraphicsOverlay.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Graphic.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Point.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;PolylineBuilder.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;SpatialReference.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;SimpleMarkerSymbol.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TextSymbol.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CompositeSymbol.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;MultilayerPointSymbol.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;PictureMarkerSymbol.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;PolygonBuilder.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;LineSegment.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;GeometryEngine.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;task.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Esri::ArcGISRuntime;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>PI<sp/>=<sp/>3.141592;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DEFINES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//<sp/>z-index<sp/>for<sp/>each<sp/>graphic<sp/>type<sp/>to<sp/>ensure<sp/>the<sp/>correct<sp/>draw<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SWATH_LINE_Z_INDEX<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GEOFENCE_POINT_Z_INDEX<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GEOFENCE_OUTLINE_Z_INDEX<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WAYPOINT_Z_INDEX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VEHICLE_PATH_Z_INDEX<sp/><sp/><sp/><sp/><sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VEHICLE_ICON_Z_INDEX<sp/><sp/><sp/><sp/><sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FUNCTION<sp/>DECLARATIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Name:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_icon_in_color</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Description:<sp/>Gets<sp/>the<sp/>image<sp/>in<sp/>the<sp/>specified<sp/>color.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Arguments:<sp/><sp/><sp/>-<sp/>resource_name:<sp/>resource<sp/>name<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>color:<sp/>icon<sp/>color</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns:<sp/><sp/><sp/><sp/><sp/>Colored<sp/>icon.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>QImage<sp/>get_icon_in_color(QString<sp/>resource_name,<sp/>QColor<sp/>color)</highlight></codeline>
<codeline lineno="67"><highlight class="normal">{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Load<sp/>image<sp/>to<sp/>use<sp/>as<sp/>alpha<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>QPixmap<sp/>pixmap<sp/>=<sp/>QPixmap(resource_name);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>painter<sp/>to<sp/>draw<sp/>on<sp/>a<sp/>pixmap<sp/>and<sp/>set<sp/>composition<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>QPainter<sp/>painter(&amp;pixmap);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>painter.setCompositionMode(QPainter::CompositionMode_SourceIn);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>painter.setBrush(color);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>painter.setPen(color);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>painter.drawRect(pixmap.rect());</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pixmap.toImage();</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Name:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_vehicle_icon_graphic</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Description:<sp/>Gets<sp/>a<sp/>graphic<sp/>representing<sp/>a<sp/>vehicle<sp/>at<sp/>a<sp/>location<sp/>with<sp/>a<sp/>yaw.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Arguments:<sp/><sp/><sp/>-<sp/>lat:<sp/>vehicle<sp/>location<sp/>latitude<sp/>in<sp/>degrees</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>lat:<sp/>vehicle<sp/>location<sp/>longitude<sp/>in<sp/>degrees</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>yaw:<sp/>vehicle<sp/>yaw<sp/>in<sp/>degrees</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>color:<sp/>vehicle<sp/>icon<sp/>color</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns:<sp/><sp/><sp/><sp/><sp/>Graphic<sp/>representing<sp/>the<sp/>vehicle.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Graphic&gt;<sp/>get_vehicle_icon_graphic(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lat,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lon,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>yaw,<sp/>QColor<sp/>color)</highlight></codeline>
<codeline lineno="93"><highlight class="normal">{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>vehicle<sp/>outline<sp/>symbol<sp/>in<sp/>white</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>QImage<sp/>vehicle_icon_outline<sp/>=<sp/>get_icon_in_color(</highlight><highlight class="stringliteral">&quot;:/resources/gps_icon.png&quot;</highlight><highlight class="normal">,<sp/>QColor(255,<sp/>255,<sp/>255));</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>PictureMarkerSymbol<sp/>vehicle_outline_symbol(vehicle_icon_outline);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>vehicle_outline_symbol.setHeight(55);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>vehicle_outline_symbol.setWidth(55);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>vehicle_outline_symbol.setAngle(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(yaw));</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>vehicle<sp/>colored<sp/>symbol<sp/>in<sp/>the<sp/>given<sp/>color</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>QImage<sp/>vehicle_color_icon<sp/>=<sp/>get_icon_in_color(</highlight><highlight class="stringliteral">&quot;:/resources/gps_icon.png&quot;</highlight><highlight class="normal">,<sp/>color);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>PictureMarkerSymbol<sp/>vehicle_color_symbol(vehicle_color_icon);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>vehicle_color_symbol.setHeight(40);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>vehicle_color_symbol.setWidth(40);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>vehicle_color_symbol.setAngle(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(yaw));</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>composite<sp/>symbol<sp/>containing<sp/>the<sp/>vehicle<sp/>symbol<sp/>components</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>QList&lt;Symbol*&gt;<sp/>symbol_list;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>symbol_list.append(&amp;vehicle_outline_symbol);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>symbol_list.append(&amp;vehicle_color_symbol);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>CompositeSymbol<sp/>vehicle_symbol(symbol_list);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Construct<sp/>a<sp/>point<sp/>in<sp/>WGS84<sp/>using<sp/>the<sp/>given<sp/>lat<sp/>and<sp/>lon</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>Point<sp/>vehicle_position<sp/>=<sp/>Point(lon,<sp/>lat,<sp/>SpatialReference::wgs84());</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>graphic<sp/>from<sp/>the<sp/>position<sp/>and<sp/>symbol</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Graphic&gt;<sp/>vehicle_icon_graphic<sp/>=</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Graphic&gt;(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Graphic(vehicle_position,<sp/>&amp;vehicle_symbol));</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>vehicle_icon_graphic-&gt;setZIndex(VEHICLE_ICON_Z_INDEX);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vehicle_icon_graphic;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Name:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_vehicle_path_graphic</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Description:<sp/>Gets<sp/>a<sp/>graphic<sp/>representing<sp/>a<sp/>vehicle<sp/>at<sp/>a<sp/>location<sp/>with<sp/>a<sp/>yaw.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Arguments:<sp/><sp/><sp/>-<sp/>path:<sp/>queue<sp/>of<sp/>points<sp/>forming<sp/>the<sp/>vehicle<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>color:<sp/>vehicle<sp/>path<sp/>color</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns:<sp/><sp/><sp/><sp/><sp/>Graphic<sp/>representing<sp/>the<sp/>vehicle.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Graphic&gt;<sp/>get_vehicle_path_graphic(QQueue&lt;Point&gt;<sp/>path,<sp/>QColor<sp/>color)</highlight></codeline>
<codeline lineno="134"><highlight class="normal">{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>polyline<sp/>from<sp/>the<sp/>points<sp/>in<sp/>the<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>PolylineBuilder<sp/>path_polyline_builder(SpatialReference::wgs84());</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Point<sp/>point:<sp/>path)</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path_polyline_builder.addPoint(point);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>Polyline<sp/>path_polyline<sp/>=<sp/>path_polyline_builder.toPolyline();</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>path<sp/>symbol<sp/>in<sp/>the<sp/>given<sp/>color</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>SimpleLineSymbol<sp/>path_symbol(SimpleLineSymbolStyle::Solid,<sp/>color,<sp/>3);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>and<sp/>return<sp/>a<sp/>graphic<sp/>from<sp/>the<sp/>polyline<sp/>and<sp/>symbol</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Graphic&gt;<sp/>vehicle_path_graphic<sp/>=</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Graphic&gt;(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Graphic(path_polyline,<sp/>&amp;path_symbol));</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>vehicle_path_graphic-&gt;setZIndex(VEHICLE_PATH_Z_INDEX);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vehicle_path_graphic;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal">}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Name:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_vehicle_path_graphic</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Description:<sp/>Gets<sp/>a<sp/>graphic<sp/>representing<sp/>a<sp/>vehicle<sp/>and<sp/>its<sp/>path..</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Arguments:<sp/><sp/><sp/>-<sp/>graphics_overlay:<sp/>pointer<sp/>to<sp/>graphics<sp/>overlay<sp/>to<sp/>add<sp/>vehicle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>graphics<sp/>to.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>path:<sp/>queue<sp/>of<sp/>points<sp/>forming<sp/>the<sp/>vehicle<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>yaw:<sp/>vehice<sp/>yaw<sp/>in<sp/>degrees</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>color:<sp/>vehicle<sp/>path<sp/>color</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>get_vehicle_graphic(std::shared_ptr&lt;GraphicsOverlay&gt;<sp/>graphics_overlay,</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QQueue&lt;Point&gt;<sp/>path,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>yaw,<sp/>QColor<sp/>color)</highlight></codeline>
<codeline lineno="164"><highlight class="normal">{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>new<sp/>graphics<sp/>for<sp/>the<sp/>new<sp/>path<sp/>and<sp/>vehicle<sp/>icon</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Graphic&gt;<sp/>path_graphic<sp/>=</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_vehicle_path_graphic(path,<sp/>color);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Graphic&gt;<sp/>icon_graphic<sp/>=</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_vehicle_icon_graphic(path.last().y(),<sp/>path.last().x(),<sp/>yaw,<sp/>color);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>graphics<sp/>overlay<sp/>is<sp/>empty,<sp/>add<sp/>the<sp/>new<sp/>graphics,<sp/>otherwise<sp/>update</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>existing<sp/>graphics</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(graphics_overlay-&gt;graphics()-&gt;size()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>graphics_overlay-&gt;graphics()-&gt;append(path_graphic.get());</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>graphics_overlay-&gt;graphics()-&gt;append(icon_graphic.get());</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>graphics_overlay-&gt;graphics()-&gt;at(0)-&gt;setGeometry(path_graphic-&gt;geometry());</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>graphics_overlay-&gt;graphics()-&gt;at(0)-&gt;setSymbol(path_graphic-&gt;symbol());</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>graphics_overlay-&gt;graphics()-&gt;at(1)-&gt;setGeometry(icon_graphic-&gt;geometry());</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>graphics_overlay-&gt;graphics()-&gt;at(1)-&gt;setSymbol(icon_graphic-&gt;symbol());</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal">}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Name:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_waypoint_graphic</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Description:<sp/>Gets<sp/>a<sp/>graphic<sp/>representing<sp/>a<sp/>waypoint<sp/>at<sp/>a<sp/>given<sp/>location.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Arguments:<sp/><sp/><sp/>-<sp/>lat:<sp/>waypoint<sp/>location<sp/>latitude<sp/>in<sp/>degrees</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>lon:<sp/>waypoint<sp/>location<sp/>longitude<sp/>in<sp/>degrees</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>number:<sp/>waypoint<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns:<sp/><sp/><sp/><sp/><sp/>Graphic<sp/>representing<sp/>the<sp/>waypoint.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Graphic&gt;<sp/>get_waypoint_graphic(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lat,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lon,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number,<sp/>QColor<sp/>color)</highlight></codeline>
<codeline lineno="198"><highlight class="normal">{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>point<sp/>representing<sp/>the<sp/>waypoint<sp/>location</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>Point<sp/>waypoint_location(lon,<sp/>lat,<sp/>SpatialReference::wgs84());</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>up<sp/>the<sp/>symbols<sp/>representing<sp/>the<sp/>waypoint.<sp/>A<sp/>waypoint<sp/>is<sp/>a<sp/>white</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>circle<sp/>with<sp/>text<sp/>inside<sp/>holding<sp/>the<sp/>waypoint<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>SimpleMarkerSymbol<sp/>waypoint_border_symbol(SimpleMarkerSymbolStyle::Circle,<sp/>color,<sp/>31);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>SimpleMarkerSymbol<sp/>waypoint_marker_symbol(SimpleMarkerSymbolStyle::Circle,<sp/>QColor(Qt::white),<sp/>25);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>TextSymbol<sp/>waypoint_text_symbol(QString::number(number),<sp/>QColor(Qt::black),<sp/>13,</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HorizontalAlignment::Center,<sp/>VerticalAlignment::Middle);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>waypoint_text_symbol.setFontWeight(FontWeight::Bold);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>composite<sp/>symbol<sp/>containing<sp/>the<sp/>waypoint<sp/>marker<sp/>and<sp/>the<sp/>text</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>QList&lt;Symbol*&gt;<sp/>symbol_list;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>symbol_list.append(&amp;waypoint_border_symbol);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>symbol_list.append(&amp;waypoint_marker_symbol);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>symbol_list.append(&amp;waypoint_text_symbol);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>CompositeSymbol<sp/>waypoint_symbol(symbol_list);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>and<sp/>return<sp/>a<sp/>graphic<sp/>from<sp/>the<sp/>waypoint<sp/>location<sp/>and<sp/>symbol</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Graphic&gt;<sp/>waypoint_graphic<sp/>=<sp/>std::shared_ptr&lt;Graphic&gt;(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Graphic(waypoint_location,<sp/>&amp;waypoint_symbol));</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>waypoint_symbol.setProperty(</highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">,<sp/>1338);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>waypoint_graphic-&gt;setProperty(</highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">,<sp/>1337);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>waypoint_graphic-&gt;setZIndex(WAYPOINT_Z_INDEX);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>waypoint_graphic;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal">}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Name:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_waypoint_graphic</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Description:<sp/>Gets<sp/>a<sp/>graphic<sp/>representing<sp/>a<sp/>waypoint<sp/>at<sp/>a<sp/>given<sp/>location.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Arguments:<sp/><sp/><sp/>-<sp/>lat:<sp/>waypoint<sp/>location<sp/>latitude<sp/>in<sp/>degrees</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>lon:<sp/>waypoint<sp/>location<sp/>longitude<sp/>in<sp/>degrees</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>number:<sp/>waypoint<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns:<sp/><sp/><sp/><sp/><sp/>Graphic<sp/>representing<sp/>the<sp/>waypoint.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Graphic&gt;<sp/>get_zone_waypoint_graphic(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lat,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lon,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number,<sp/>QColor<sp/>color)</highlight></codeline>
<codeline lineno="236"><highlight class="normal">{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>point<sp/>representing<sp/>the<sp/>waypoint<sp/>location</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>Point<sp/>waypoint_location(lon,<sp/>lat,<sp/>SpatialReference::wgs84());</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>up<sp/>the<sp/>symbols<sp/>representing<sp/>the<sp/>waypoint.<sp/>A<sp/>waypoint<sp/>is<sp/>a<sp/>white</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>circle<sp/>with<sp/>text<sp/>inside<sp/>holding<sp/>the<sp/>waypoint<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>SimpleMarkerSymbol<sp/>waypoint_border_symbol(SimpleMarkerSymbolStyle::Circle,<sp/>color,<sp/>31);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>SimpleMarkerSymbol<sp/>waypoint_marker_symbol(SimpleMarkerSymbolStyle::Circle,<sp/>QColor(Qt::white),<sp/>25);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>TextSymbol<sp/>waypoint_text_symbol(</highlight><highlight class="stringliteral">&quot;z&quot;</highlight><highlight class="normal"><sp/>+<sp/>QString::number(number),<sp/>QColor(Qt::black),<sp/>13,</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HorizontalAlignment::Center,<sp/>VerticalAlignment::Middle);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>waypoint_text_symbol.setFontWeight(FontWeight::Bold);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>composite<sp/>symbol<sp/>containing<sp/>the<sp/>waypoint<sp/>marker<sp/>and<sp/>the<sp/>text</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>QList&lt;Symbol*&gt;<sp/>symbol_list;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>symbol_list.append(&amp;waypoint_border_symbol);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>symbol_list.append(&amp;waypoint_marker_symbol);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>symbol_list.append(&amp;waypoint_text_symbol);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>CompositeSymbol<sp/>waypoint_symbol(symbol_list);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>and<sp/>return<sp/>a<sp/>graphic<sp/>from<sp/>the<sp/>waypoint<sp/>location<sp/>and<sp/>symbol</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Graphic&gt;<sp/>waypoint_graphic<sp/>=<sp/>std::shared_ptr&lt;Graphic&gt;(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Graphic(waypoint_location,<sp/>&amp;waypoint_symbol));</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>waypoint_symbol.setProperty(</highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">,<sp/>1338);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>waypoint_graphic-&gt;setProperty(</highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">,<sp/>1337);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>waypoint_graphic-&gt;setZIndex(WAYPOINT_Z_INDEX);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>waypoint_graphic;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal">}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Name:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_geofence_graphic</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Description:<sp/>Gets<sp/>a<sp/>graphic<sp/>representing<sp/>a<sp/>point<sp/>at<sp/>a<sp/>given<sp/>lat<sp/>and<sp/>lon.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Arguments:<sp/><sp/><sp/>-<sp/>lat:<sp/>latitude<sp/>of<sp/>point<sp/>in<sp/>degrees</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>lon:<sp/>longitude<sp/>of<sp/>point<sp/>in<sp/>degrees</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns:<sp/><sp/><sp/><sp/><sp/>Graphic<sp/>representing<sp/>the<sp/>geofence<sp/>point.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Graphic&gt;<sp/>get_geofence_graphic(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lat,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lon)</highlight></codeline>
<codeline lineno="273"><highlight class="normal">{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>Point<sp/>geofence_point_location(lon,<sp/>lat,<sp/>SpatialReference::wgs84());</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>SimpleMarkerSymbol<sp/>geofence_outline_point_symbol(SimpleMarkerSymbolStyle::Square,</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QColor(Qt::red),<sp/>10);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Graphic&gt;<sp/>geofence_point_graphic<sp/>=<sp/>std::shared_ptr&lt;Graphic&gt;(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Graphic(geofence_point_location,<sp/>&amp;geofence_outline_point_symbol));</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>geofence_point_graphic-&gt;setZIndex(GEOFENCE_POINT_Z_INDEX);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//graphics_overlay-&gt;graphics()-&gt;append(geofence_point_graphic.get());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>geofence_point_graphic;</highlight></codeline>
<codeline lineno="283"><highlight class="normal">}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Name:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_geofence_outline_graphic</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Description:<sp/>Gets<sp/>a<sp/>graphic<sp/>representing<sp/>a<sp/>swath<sp/>line<sp/>between<sp/>two<sp/>locations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Arguments:<sp/><sp/><sp/>-<sp/>lat1:<sp/>start<sp/>point<sp/>latitude<sp/>in<sp/>degrees</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>lon1:<sp/>start<sp/>point<sp/>longitude<sp/>in<sp/>degrees</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>lat1:<sp/>end<sp/>point<sp/>latitude<sp/>in<sp/>degrees</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>lon1:<sp/>end<sp/>point<sp/>longitude<sp/>in<sp/>degrees</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>color:<sp/>swath<sp/>line<sp/>coloe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns:<sp/><sp/><sp/><sp/><sp/>Graphic<sp/>representing<sp/>the<sp/>swath<sp/>line.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Graphic&gt;<sp/>get_geofence_outline_graphic(QVector&lt;QPointF&gt;<sp/>geofence_points)</highlight></codeline>
<codeline lineno="296"><highlight class="normal">{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>SimpleLineSymbol<sp/>geofence_outline_symbol(SimpleLineSymbolStyle::Solid,<sp/>QColor(Qt::red),<sp/>2);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>PolygonBuilder<sp/>polygonBuilder(SpatialReference::wgs84());</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>point:geofence_points)</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>polygonBuilder.addPoint(point.x(),<sp/>point.y());</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>Polygon<sp/>polygon(polygonBuilder.toGeometry());</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>Polyline<sp/>polygon_outline<sp/>=<sp/>polygon.toPolyline();</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Graphic&gt;<sp/>geofence_outline_graphic<sp/>=<sp/>std::shared_ptr&lt;Graphic&gt;(</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Graphic(polygon,<sp/>&amp;geofence_outline_symbol));</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>geofence_outline_graphic-&gt;setZIndex(GEOFENCE_OUTLINE_Z_INDEX);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>geofence_outline_graphic;</highlight></codeline>
<codeline lineno="309"><highlight class="normal">}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Name:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_zone_outline_graphicl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Description:<sp/>Gets<sp/>a<sp/>graphic<sp/>representing<sp/>a<sp/>envolope<sp/>with<sp/>the<sp/>given<sp/>points.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Arguments:<sp/><sp/><sp/>-<sp/>points:<sp/>vertices<sp/>of<sp/>the<sp/>polygon</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>color:<sp/>swath<sp/>line<sp/>coloe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns:<sp/><sp/><sp/><sp/><sp/>Graphic<sp/>representing<sp/>the<sp/>zone<sp/>outline.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Graphic&gt;<sp/>get_zone_outline_graphic(QVector&lt;QPointF&gt;<sp/>points,<sp/>QColor<sp/>color)</highlight></codeline>
<codeline lineno="321"><highlight class="normal">{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>SimpleLineSymbol<sp/>zone_outline_symbol(SimpleLineSymbolStyle::Solid,<sp/>color,<sp/>3);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>PolygonBuilder<sp/>polygonBuilder(SpatialReference::wgs84());</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>point:points)</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>polygonBuilder.addPoint(point.x(),<sp/>point.y());</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>Polygon<sp/>polygon(polygonBuilder.toGeometry());</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>Polyline<sp/>polygon_outline<sp/>=<sp/>polygon.toPolyline();</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Graphic&gt;<sp/>zone_outline_graphic<sp/>=<sp/>std::shared_ptr&lt;Graphic&gt;(</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Graphic(polygon,<sp/>&amp;zone_outline_symbol));</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>zone_outline_graphic-&gt;setZIndex(SWATH_LINE_Z_INDEX);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>zone_outline_graphic;</highlight></codeline>
<codeline lineno="337"><highlight class="normal">}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Name:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_swath_line_graphic</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Description:<sp/>Gets<sp/>a<sp/>graphic<sp/>representing<sp/>a<sp/>swath<sp/>line<sp/>between<sp/>two<sp/>locations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Arguments:<sp/><sp/><sp/>-<sp/>lat1:<sp/>start<sp/>point<sp/>latitude<sp/>in<sp/>degrees</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>lon1:<sp/>start<sp/>point<sp/>longitude<sp/>in<sp/>degrees</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>lat1:<sp/>end<sp/>point<sp/>latitude<sp/>in<sp/>degrees</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>lon1:<sp/>end<sp/>point<sp/>longitude<sp/>in<sp/>degrees</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>color:<sp/>swath<sp/>line<sp/>coloe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns:<sp/><sp/><sp/><sp/><sp/>Graphic<sp/>representing<sp/>the<sp/>swath<sp/>line.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Graphic&gt;<sp/>get_swath_line_graphic(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lat1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lon1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lat2,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lon2,<sp/>QColor<sp/>color)</highlight></codeline>
<codeline lineno="351"><highlight class="normal">{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>the<sp/>swath<sp/>line<sp/>partially<sp/>transparent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>color.setAlpha(100);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>line<sp/>symbol<sp/>for<sp/>the<sp/>swath<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>SimpleLineSymbol<sp/>swath_line_symbol(SimpleLineSymbolStyle::Solid,<sp/>color,<sp/>3);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>points<sp/>representing<sp/>the<sp/>lat/lon</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>Point<sp/>point1(lon1,<sp/>lat1,<sp/>SpatialReference::wgs84());</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>Point<sp/>point2(lon2,<sp/>lat2,<sp/>SpatialReference::wgs84());</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>polyline<sp/>from<sp/>the<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>PolylineBuilder<sp/>polyline_builder(SpatialReference::wgs84());</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>polyline_builder.addPoint(point1);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>polyline_builder.addPoint(point2);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>Polyline<sp/>swath_line<sp/>=<sp/>polyline_builder.toGeometry();</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>and<sp/>return<sp/>the<sp/>swath<sp/>line<sp/>graphic</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Graphic&gt;<sp/>swath_line_graphic<sp/>=<sp/>std::shared_ptr&lt;Graphic&gt;(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Graphic(swath_line,<sp/>&amp;swath_line_symbol));</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>swath_line_graphic-&gt;setZIndex(SWATH_LINE_Z_INDEX);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>swath_line_graphic;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal">}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Name:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_task_graphic</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Description:<sp/>Gets<sp/>a<sp/>graphic<sp/>representing<sp/>a<sp/>task.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Arguments:<sp/><sp/><sp/>-<sp/>graphics_overlay:<sp/>pointer<sp/>to<sp/>graphics<sp/>overlay<sp/>to<sp/>add<sp/>task</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>graphic<sp/>to.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>task:<sp/>task<sp/>to<sp/>generate<sp/>graphic<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>color:<sp/>task<sp/>color</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns:<sp/><sp/><sp/><sp/><sp/>Graphic<sp/>representing<sp/>the<sp/>task.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>get_task_graphic(GraphicsOverlay*<sp/>graphics_overlay,<sp/><ref refid="class_task" kindref="compound">Task</ref>*<sp/>task,<sp/>QColor<sp/>color)</highlight></codeline>
<codeline lineno="386"><highlight class="normal">{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(task-&gt;get_type())</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>TaskType::TASK_PRIMITIVE:</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>TaskType::TASK_WAYPOINT:</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(task-&gt;get_points().size()<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>waypoint<sp/>graphic<sp/>and<sp/>add<sp/>it<sp/>to<sp/>the<sp/>overlay</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lat<sp/>=<sp/>task-&gt;get_points()[0].first.y();</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lon<sp/>=<sp/>task-&gt;get_points()[0].first.x();</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Graphic&gt;<sp/>waypoint_graphic<sp/>=</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_waypoint_graphic(lat,<sp/>lon,<sp/>0,<sp/>color);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>graphics_overlay-&gt;graphics()-&gt;append(waypoint_graphic.get());</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>TaskType::TASK_PATH:</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>through<sp/>all<sp/>points<sp/>in<sp/>the<sp/>taskwaypoint_graphic</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVector&lt;std::pair&lt;QPointF,<sp/>ActionType::Value&gt;&gt;<sp/>points<sp/>=<sp/>task-&gt;get_points();</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>points.size();<sp/>i++)</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>waypoint<sp/>graphic<sp/>and<sp/>add<sp/>it<sp/>to<sp/>the<sp/>overlay</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lat<sp/>=<sp/>points.at(i).first.y();</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lon<sp/>=<sp/>points.at(i).first.x();</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!std::isnan(lat)<sp/>&amp;&amp;<sp/>!std::isnan(lon))</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Graphic&gt;<sp/>waypoint_graphic<sp/>=</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_waypoint_graphic(lat,<sp/>lon,<sp/>i,<sp/>color);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>graphics_overlay-&gt;graphics()-&gt;append(waypoint_graphic.get());</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>this<sp/>is<sp/>not<sp/>the<sp/>first<sp/>point,<sp/>it<sp/>can<sp/>be<sp/>connected</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>the<sp/>previous<sp/>point<sp/>by<sp/>a<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>swath<sp/>line<sp/>graphic<sp/>and<sp/>add<sp/>it<sp/>to<sp/>the<sp/>overlay</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>prev_lat<sp/>=<sp/>points.at(i-1).first.y();</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>prev_lon<sp/>=<sp/>points.at(i-1).first.x();</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Graphic&gt;<sp/>swath_line_graphic<sp/>=</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_swath_line_graphic(prev_lat,</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev_lon,</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lat,</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lon,</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>graphics_overlay-&gt;graphics()-&gt;append(swath_line_graphic.get());</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>TaskType::TASK_ZONE:</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>through<sp/>all<sp/>points<sp/>in<sp/>the<sp/>taskwaypoint_graphic</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVector&lt;std::pair&lt;QPointF,<sp/>ActionType::Value&gt;&gt;<sp/>points<sp/>=<sp/>task-&gt;get_points();</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>points.size();<sp/>i++)</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>waypoint<sp/>graphic<sp/>and<sp/>add<sp/>it<sp/>to<sp/>the<sp/>overlay</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lat<sp/>=<sp/>points.at(i).first.y();</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lon<sp/>=<sp/>points.at(i).first.x();</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!std::isnan(lat)<sp/>&amp;&amp;<sp/>!std::isnan(lon))</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Graphic&gt;<sp/>waypoint_graphic<sp/>=</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_zone_waypoint_graphic(lat,<sp/>lon,<sp/>i,<sp/>color);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>graphics_overlay-&gt;graphics()-&gt;append(waypoint_graphic.get());</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVector&lt;QPointF&gt;<sp/>only_points;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>point:<sp/>points)</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>only_points.push_back(point.first);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Graphic&gt;<sp/>zone_outline_graphic<sp/>=<sp/>get_zone_outline_graphic(only_points,<sp/>color);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>graphics_overlay-&gt;graphics()-&gt;append(zone_outline_graphic.get());</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="491"><highlight class="normal">}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>generate_survey_zone_points(<ref refid="class_task" kindref="compound">Task</ref>*<sp/>zone_task,<sp/><ref refid="class_task" kindref="compound">Task</ref>*<sp/>path_task,<sp/>GraphicsOverlay*<sp/>graphics_overlay)</highlight></codeline>
<codeline lineno="495"><highlight class="normal">{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>path_task-&gt;clear_points_silent();</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>swath_heading<sp/>=<sp/>zone_task-&gt;get_angle();</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>swath_width<sp/>=<sp/>zone_task-&gt;get_swath();</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(zone_task-&gt;get_points().size()<sp/>==<sp/>0<sp/>||<sp/>swath_width<sp/>==<sp/>0.0)</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>the<sp/>QVector&lt;QPointF&gt;<sp/>to<sp/>QList&lt;Point&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>QList&lt;Point&gt;<sp/>zone_points;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>point:zone_task-&gt;get_points())</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>latitude<sp/>and<sp/>long<sp/>inversion<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zone_points.push_back(Point(point.first.x(),<sp/>point.first.y()));</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Build<sp/>a<sp/>survey<sp/>zone<sp/>polygon<sp/>and<sp/>polyline<sp/>from<sp/>the<sp/>list<sp/>of<sp/>survey<sp/>zone<sp/>outline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>points.<sp/>THe<sp/>polygon<sp/>will<sp/>be<sp/>filled<sp/>as<sp/>a<sp/>background,<sp/>and<sp/>the<sp/>polyline<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>rendered<sp/>as<sp/>an<sp/>outline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>PolygonBuilder*<sp/>polygonBuilder<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>PolygonBuilder(SpatialReference::wgs84());</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>polygonBuilder-&gt;addPoints(zone_points);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>Polygon<sp/>polygon(polygonBuilder-&gt;toGeometry());</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>Polyline<sp/>polygon_outline<sp/>=<sp/>polygon.toPolyline();</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Generate<sp/>the<sp/>initial<sp/>scanline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>swath_heading_rad<sp/>=<sp/>(-zone_task-&gt;get_angle()<sp/>+<sp/>90.0)<sp/>*<sp/>3.141592/180.0;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Determine<sp/>the<sp/>envelope<sp/>of<sp/>the<sp/>survey<sp/>area<sp/>polygon<sp/>and<sp/>draw<sp/>it<sp/>on<sp/>the<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>Envelope<sp/>envelope<sp/>=<sp/>polygon.extent();</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>want<sp/>to<sp/>start<sp/>from<sp/>the<sp/>upper<sp/>left<sp/>corner<sp/>of<sp/>the<sp/>envelope<sp/>and<sp/>move<sp/>through</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>entire<sp/>survey<sp/>area<sp/>envelope.<sp/>The<sp/>scan<sp/>line<sp/>must<sp/>be<sp/>the<sp/>maximum<sp/>length<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>line<sp/>that<sp/>fits<sp/>in<sp/>the<sp/>envelope,<sp/>which<sp/>is<sp/>the<sp/>diagonal<sp/>length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>Point<sp/>envelope_corner_point;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(swath_heading<sp/>&gt;=<sp/>0.0<sp/>&amp;&amp;<sp/>swath_heading<sp/>&lt;<sp/>90.0)</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>envelope_corner_point<sp/>=<sp/>Point(envelope.xMin(),<sp/>envelope.yMax(),<sp/>SpatialReference::wgs84());</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(swath_heading<sp/>&gt;=<sp/>90.0<sp/>&amp;&amp;<sp/>swath_heading<sp/>&lt;<sp/>180.0)</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>envelope_corner_point<sp/>=<sp/>Point(envelope.xMax(),<sp/>envelope.yMax(),<sp/>SpatialReference::wgs84());</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(swath_heading<sp/>&gt;=<sp/>180.0<sp/>&amp;&amp;<sp/>swath_heading<sp/>&lt;<sp/>270.0)</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>envelope_corner_point<sp/>=<sp/>Point(envelope.xMax(),<sp/>envelope.yMin(),<sp/>SpatialReference::wgs84());</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>envelope_corner_point<sp/>=<sp/>Point(envelope.xMin(),<sp/>envelope.yMin(),<sp/>SpatialReference::wgs84());</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>envelope_max_length<sp/>=<sp/>sqrt(envelope.height()*envelope.height()<sp/>+</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>envelope.width()*envelope.width());</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>corner<sp/>point<sp/>at<sp/>the<sp/>swath<sp/>heading<sp/>angle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>LineSegment<sp/>scan_line_segment1<sp/>=<sp/>LineSegment::createLineAtAngleFromStartPoint(envelope_corner_point,<sp/>swath_heading_rad,<sp/>envelope_max_length);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>LineSegment<sp/>scan_line_segment2<sp/>=<sp/>LineSegment::createLineAtAngleFromStartPoint(envelope_corner_point,<sp/>swath_heading_rad<sp/>+<sp/>PI,<sp/>envelope_max_length);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Build<sp/>a<sp/>polyline<sp/>connecting<sp/>the<sp/>two<sp/>endpoints<sp/>of<sp/>the<sp/>line<sp/>segments<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>complete<sp/>form<sp/>the<sp/>initial<sp/>scanline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>PolylineBuilder<sp/>scan_line_builder(SpatialReference::wgs84());</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>scan_line_builder.addPoint(scan_line_segment2.endPoint());</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>scan_line_builder.addPoint(scan_line_segment1.endPoint());</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>Polyline<sp/>scan_line<sp/>=<sp/>scan_line_builder.toGeometry();</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>*****************************************************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Generate<sp/>scanlines<sp/>in<sp/>the<sp/>survey<sp/>zone</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>SimpleLineSymbol*<sp/>swath_line_symbol<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>SimpleLineSymbol(SimpleLineSymbolStyle::Solid,<sp/>QColor(0,<sp/>255,<sp/>0,<sp/>255),<sp/>3);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>SimpleMarkerSymbol*<sp/>waypoint_marker_symbol<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>SimpleMarkerSymbol(SimpleMarkerSymbolStyle::Circle,<sp/>QColor(Qt::white),<sp/>25);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>waypoint_counter<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>alternate<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>scan<sp/>lines<sp/>offset<sp/>by<sp/>the<sp/>swath<sp/>width<sp/>until<sp/>they<sp/>are<sp/>no<sp/>longer<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>survey<sp/>zone<sp/>envelope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>scan_line_in_zone;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Offset<sp/>the<sp/>scanline<sp/>by<sp/>the<sp/>swath<sp/>width<sp/>and<sp/>determine<sp/>if<sp/>it<sp/>is<sp/>still</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>within<sp/>the<sp/>survey<sp/>zone</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scan_line<sp/>=<sp/>GeometryEngine::offset(scan_line,<sp/>swath_width/6371000*180.0/3.141592,<sp/>GeometryOffsetType::Mitered,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scan_line_in_zone<sp/>=<sp/>GeometryEngine::intersects(scan_line,<sp/>envelope);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>all<sp/>intersections<sp/>of<sp/>the<sp/>scanline<sp/>with<sp/>the<sp/>survey<sp/>zone</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QList&lt;Geometry&gt;<sp/>intersection_geometry<sp/>=<sp/>GeometryEngine::intersections(polygon_outline,<sp/>scan_line);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(intersection_geometry.size()<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>first<sp/>entry<sp/>of<sp/>the<sp/>intersection<sp/>results<sp/>are<sp/>intersection<sp/>points.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>are<sp/>two<sp/>intersections,<sp/>the<sp/>scan<sp/>line<sp/>is<sp/>going<sp/>through<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>survey<sp/>zone</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Multipoint<sp/>intersection_points<sp/>=<sp/>intersection_geometry[0];</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImmutablePointCollection<sp/>point_collection<sp/>=<sp/>intersection_points.points();</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(point_collection.size()<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Draw<sp/>a<sp/>swath<sp/>line<sp/>between<sp/>the<sp/>intersection<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PolylineBuilder<sp/>swath_line_builder(SpatialReference::wgs84());</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>swath_line_builder.addPoint(point_collection.point(0));</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>swath_line_builder.addPoint(point_collection.point(1));</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Polyline<sp/>swath_line<sp/>=<sp/>swath_line_builder.toGeometry();</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Graphic*<sp/>swath_line_graphic<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Graphic(swath_line,<sp/>swath_line_symbol);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>swath_line_graphic-&gt;setZIndex(SWATH_LINE_Z_INDEX);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Draw<sp/>waypoints<sp/>at<sp/>the<sp/>intersection<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Graphic*<sp/>swath_start_waypoint<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Graphic(point_collection.point(0),<sp/>waypoint_marker_symbol);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Graphic*<sp/>swath_end_waypoint<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Graphic(point_collection.point(1),<sp/>waypoint_marker_symbol);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>swath_start_waypoint-&gt;setZIndex(SWATH_LINE_Z_INDEX);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>swath_end_waypoint-&gt;setZIndex(SWATH_LINE_Z_INDEX);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!alternate)</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/>path_task-&gt;add_point_silent(QPointF(point_collection.point(0).x(),<sp/>point_collection.point(0).y()));</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path_task-&gt;add_point_silent(QPointF(point_collection.point(1).x(),<sp/>point_collection.point(1).y()));</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alternate<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path_task-&gt;add_point_silent(QPointF(point_collection.point(1).x(),<sp/>point_collection.point(1).y()));</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path_task-&gt;add_point_silent(QPointF(point_collection.point(0).x(),<sp/>point_collection.point(0).y()));</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alternate<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(scan_line_in_zone);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal">}</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Name:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_mission_graphic</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Description:<sp/>Gets<sp/>a<sp/>graphic<sp/>representing<sp/>a<sp/>mission<sp/>consisting<sp/>of<sp/>a<sp/>series<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tasks.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Arguments:<sp/><sp/><sp/>-<sp/>graphics_overlay:<sp/>pointer<sp/>to<sp/>graphics<sp/>overlay<sp/>to<sp/>add<sp/>mission</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>graphic<sp/>to.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>mission:<sp/>mission<sp/>to<sp/>generate<sp/>graphic<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>color:<sp/>task<sp/>color</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns:<sp/><sp/><sp/><sp/><sp/>Graphic<sp/>representing<sp/>the<sp/>mission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>get_mission_graphic(GraphicsOverlay*<sp/>graphics_overlay,<sp/><ref refid="class_mission" kindref="compound">Mission</ref>*<sp/>mission,<sp/>QColor<sp/>color)</highlight></codeline>
<codeline lineno="634"><highlight class="normal">{</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>any<sp/>existing<sp/>graphics<sp/>from<sp/>the<sp/>overlay</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/>graphics_overlay-&gt;graphics()-&gt;clear();</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mission-&gt;size();<sp/>i++)</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_task_graphic(graphics_overlay,<sp/>mission-&gt;get(i),<sp/>color);</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mission-&gt;get(i)-&gt;get_type()<sp/>==<sp/>TaskType::TASK_ZONE<sp/>&amp;&amp;<sp/>mission-&gt;get(i)-&gt;get_points().size()<sp/>&gt;<sp/>2)</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Manipulate<sp/>the<sp/>next<sp/>task<sp/>to<sp/>the<sp/>zone<sp/>task</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>generate_survey_zone_points(mission-&gt;get(i),<sp/>mission-&gt;get(i+1),<sp/>graphics_overlay);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_task_graphic(graphics_overlay,<sp/>mission-&gt;get(i+1),<sp/>color);</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="651"><highlight class="normal">}</highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="655"><highlight class="comment"><sp/>*******************<sp/>UPDATED<sp/>GRAPHICS<sp/>FOR<sp/>THE<sp/>NEW<sp/>ACTION<sp/>TYPES<sp/>********************</highlight></codeline>
<codeline lineno="656"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Name:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_waypoint_graphic</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Description:<sp/>Gets<sp/>a<sp/>graphic<sp/>representing<sp/>a<sp/>waypoint<sp/>at<sp/>a<sp/>given<sp/>location.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Arguments:<sp/><sp/><sp/>-<sp/>lat:<sp/>waypoint<sp/>location<sp/>latitude<sp/>in<sp/>degrees</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>lon:<sp/>waypoint<sp/>location<sp/>longitude<sp/>in<sp/>degrees</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>number:<sp/>waypoint<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns:<sp/><sp/><sp/><sp/><sp/>Graphic<sp/>representing<sp/>the<sp/>waypoint.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Graphic&gt;<sp/>get_waypoint_graphic(<ref refid="struct_task_1_1waypoint" kindref="compound">Task::waypoint</ref><sp/>wp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number,<sp/>QColor<sp/>color)</highlight></codeline>
<codeline lineno="667"><highlight class="normal">{</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>point<sp/>representing<sp/>the<sp/>waypoint<sp/>location</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/>Point<sp/>waypoint_location(wp.lon,<sp/>wp.lat,<sp/>SpatialReference::wgs84());</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>up<sp/>the<sp/>symbols<sp/>representing<sp/>the<sp/>waypoint.<sp/>A<sp/>waypoint<sp/>is<sp/>a<sp/>white</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>circle<sp/>with<sp/>text<sp/>inside<sp/>holding<sp/>the<sp/>waypoint<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/>SimpleMarkerSymbol<sp/>waypoint_border_symbol(SimpleMarkerSymbolStyle::Circle,<sp/>color,<sp/>31);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/>SimpleMarkerSymbol<sp/>waypoint_marker_symbol(SimpleMarkerSymbolStyle::Circle,<sp/>QColor(Qt::white),<sp/>25);</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/>TextSymbol<sp/>waypoint_text_symbol(QString::number(number),<sp/>QColor(Qt::black),<sp/>13,</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HorizontalAlignment::Center,<sp/>VerticalAlignment::Middle);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/>waypoint_text_symbol.setFontWeight(FontWeight::Bold);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>composite<sp/>symbol<sp/>containing<sp/>the<sp/>waypoint<sp/>marker<sp/>and<sp/>the<sp/>text</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/>QList&lt;Symbol*&gt;<sp/>symbol_list;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/>symbol_list.append(&amp;waypoint_border_symbol);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/>symbol_list.append(&amp;waypoint_marker_symbol);</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/>symbol_list.append(&amp;waypoint_text_symbol);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/>CompositeSymbol<sp/>waypoint_symbol(symbol_list);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>and<sp/>return<sp/>a<sp/>graphic<sp/>from<sp/>the<sp/>waypoint<sp/>location<sp/>and<sp/>symbol</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Graphic&gt;<sp/>waypoint_graphic<sp/>=<sp/>std::shared_ptr&lt;Graphic&gt;(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Graphic(waypoint_location,<sp/>&amp;waypoint_symbol));</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/>waypoint_symbol.setProperty(</highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">,<sp/>1338);</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/>waypoint_graphic-&gt;setProperty(</highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">,<sp/>1337);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/>waypoint_graphic-&gt;setZIndex(WAYPOINT_Z_INDEX);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>waypoint_graphic;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal">}</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>GRAPHICS_H</highlight></codeline>
    </programlisting>
    <location file="/home/cooper/test/avl_gui_new/include/graphics.h"/>
  </compounddef>
</doxygen>
